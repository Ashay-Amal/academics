Title,ID,URL,Summary
Real-time stock analysis for blending recipes in industrial plants,http://arxiv.org/abs/1909.02960v1,http://arxiv.org/pdf/1909.02960v1,"Many companies use Excel spreadsheets to keep stock records and to calculate
process-specific data. These spreadsheets are often hard to understand and
track. And if the user does not protect them, there is a risk that the user
randomly changes or erase formulas. The paper focuses on the stocks of products
used in a blending process with a known recipe. Developing an application that
can bring this data in a centralized form and that can assist the operator in
decide is a necessity. When a programmer implements an application that uses
data from plants he needs to consider one fundamental aspect as reading
real-time data from the process. The real-time stock analysis application takes
into account all the above elements. The application is easy to use by an
operator in the command room of installation because of the planning algorithms
integrated into it. The algorithms proposed and implemented in this paper have
well-defined goals: identifying the ingredients needed to achieve the blending
process for required quantities, determine the quantities of the finished
product that can be made with the existing ingredients and determine the
optimum quantities of the finished product. The application implemented in C#
intensively uses these algorithms and gives the user the ability to build the
result step by step."
Training Recipe for N:M Structured Sparsity with Decaying Pruning Mask,http://arxiv.org/abs/2209.07617v1,http://arxiv.org/pdf/2209.07617v1,"Sparsity has become one of the promising methods to compress and accelerate
Deep Neural Networks (DNNs). Among different categories of sparsity, structured
sparsity has gained more attention due to its efficient execution on modern
accelerators. Particularly, N:M sparsity is attractive because there are
already hardware accelerator architectures that can leverage certain forms of
N:M structured sparsity to yield higher compute-efficiency. In this work, we
focus on N:M sparsity and extensively study and evaluate various training
recipes for N:M sparsity in terms of the trade-off between model accuracy and
compute cost (FLOPs). Building upon this study, we propose two new decay-based
pruning methods, namely ""pruning mask decay"" and ""sparse structure decay"". Our
evaluations indicate that these proposed methods consistently deliver
state-of-the-art (SOTA) model accuracy, comparable to unstructured sparsity, on
a Transformer-based model for a translation task. The increase in the accuracy
of the sparse model using the new training recipes comes at the cost of
marginal increase in the total training compute (FLOPs)."
Making Hybrid Languages: A Recipe,http://arxiv.org/abs/2403.01335v1,http://arxiv.org/pdf/2403.01335v1,"The dominant programming languages support only linear text to express ideas.
Visual languages offer graphical representations for entire programs, when
viewed with special tools. Hybrid languages, with support from existing tools,
allow developers to express their ideas with a mix of textual and graphical
syntax tailored to an application domain. This mix puts both kinds of syntax on
equal footing and, importantly, the enriched language does not disrupt a
programmer's typical workflow. This paper presents a recipe for equipping
existing textual programming languages as well as accompanying IDEs with a
mechanism for creating and using graphical interactive syntax. It also presents
the first hybrid language and IDE created using the recipe."
